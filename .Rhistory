)
}
r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / N
beta_k
r2theta(y0, X0, Z, Lambda, u_k, beta_k, n, p, q) / N
r2theta(y0, X0, Z, diag(nrow=2000, ncol=2000), data$b, beta_k, n, p, q) / N
r2theta <- function(y, X, Z, Lambda, u, beta, n, p, q){
z <- rbind(y, matrix(0, nrow=n*q, ncol=1))
A <- cbind(
rbind(Z%*%Lambda, diag(n*q)),
rbind(X, matrix(0, nrow=n*q, ncol=p))
)
return (
norm(y - X%*%beta - Z%*%Lambda%*%u, "2")^2 + norm(u, "2")^2
)
}
r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / N
Lambda_k
theta
devtheta <- function(theta, y, X, Z, sig2e, u, beta, n, N, p, q,
R_XtR_X=NULL, REML=FALSE){
if (REML & is.null(R_XtR_X)){
REML <- FALSE
message("R_X matrix not provided; cannot do REML optimization.
Switching to normal optimization.")
}
Lambda <- mapping(theta, n, q, init=TRUE)
LLt <- t(Lambda) %*% t(Z) %*% Z %*% Lambda + diag(n*q)
L <- t(chol(LLt))
r2theta <- r2theta(y, X, Z, Lambda, u, beta, n, p, q)
if (REML){
return(
2*determinant(L)$modulus + determinant(R_XtR_X)$modulus +
(N-p)*(1 + log(2*pi*r2theta/(N-p)))
)
} else {
return(
2*determinant(L)$modulus + N*(1 + log(2*pi*r2theta/N))
)
}
}
theta_k <- theta_0
sig2e_k <- sig2e_0
# create covariance Cholesky factor
Lambda_k <- mapping(theta_k, n, q, init=TRUE)
beta_k <- beta_0
beta_k
theta_k
sig2e_k
# update covariance Cholesky factor
Lambda_k@x[] <- mapping(theta_k, n, q, init=FALSE)
LLt <- t(Lambda_k) %*% t(Z) %*% Z %*% Lambda_k + diag(n*q)
L <- t(chol(LLt))
# Solve normal equations
R_ZX <- solve( L, t(Lambda_k) %*% t(Z) %*% X0 )
R_XtR_X <- (t(X0) %*% X0) - (t(R_ZX) %*% R_ZX)
AtA <- cbind(
rbind(L%*%t(L), t(R_ZX)%*%t(L)),
rbind(L%*%R_ZX, t(R_ZX) %*% R_ZX + R_XtR_X)
)
d_k <- solve(
AtA,
rbind( t(Lambda_k)%*%t(Z)%*%y0, t(X0)%*%y0 )
)
u_k <- d_k[1:(n*q)]
beta_k <- d_k[-(1:(n*q))]
# Update residual
if (REML){
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / (N-p)
} else {
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / N
}
devtheta <- function(theta, y, X, Z, sig2e, u, beta, n, N, p, q,
R_XtR_X=NULL, REML=FALSE){
if (REML & is.null(R_XtR_X)){
REML <- FALSE
message("R_X matrix not provided; cannot do REML optimization.
Switching to normal optimization.")
}
Lambda <- mapping(theta, n, q, init=TRUE)
LLt <- t(Lambda) %*% t(Z) %*% Z %*% Lambda + diag(n*q)
L <- t(chol(LLt))
r2theta <- r2theta(y, X, Z, Lambda, u, beta, n, p, q)
if (REML){
return(
2*determinant(L)$modulus + determinant(R_XtR_X)$modulus +
(N-p)*(1 + log(2*pi*r2theta/(N-p)))
)
} else {
return(
2*determinant(L)$modulus + N*(1 + log(2*pi*r2theta/N))
)
}
}
gr_devtheta <- function(theta, y, X, Z, sig2e, u, beta, n, N, p, q,
R_XtR_X=NULL, REML=FALSE){
Lambda <- mapping(theta, n, q, init=TRUE)
LLt <- t(Lambda) %*% t(Z) %*% Z %*% Lambda + diag(n*q)
L <- t(chol(LLt))
r2theta <- r2theta(y, X, Z, Lambda, u, beta, n, p, q)
gr <- rep(NA, length(theta))
for (i in 1:length(gr)){
ind_vect <- rep(0, length(gr))
ind_vect[i] <- 1
D <- mapping(ind_vect, n, q, init=FALSE)
gr[i] <- sum(diag(
solve(LLt) %*% (t(Lambda)%*%t(Z)%*%Z%*%D + t(D)%*%t(Z)%*%Z%*%Lambda_k) -
2*t(u) %*%t(D)%*%t(Z)%*%(y - Z%*%Lambda%*%u - X%*%beta)/sig2e
))
}
}
r2theta <- function(y, X, Z, Lambda, u, beta, n, p, q){
z <- rbind(y, matrix(0, nrow=n*q, ncol=1))
A <- cbind(
rbind(Z%*%Lambda, diag(n*q)),
rbind(X, matrix(0, nrow=n*q, ncol=p))
)
return (
norm(y - X%*%beta - Z%*%Lambda%*%u, "2")^2 + norm(u, "2")^2
)
}
mapping <- function(theta, n, q, init){
if ( init ){
Lambda_0 <- matrix(0, q, q)
Lambda_0[lower.tri(Lambda_0, diag=TRUE)] <- theta
Lambda <- bdiag( rep(list(Lambda_0), n) )
return( Lambda )
} else {
return ( rep(theta, n) )
}
}
# center data
y0 <- as.matrix(y) - mean(y)
X0 <- scale(X)
beta_k <- beta_0
theta_k <- theta_0
sig2e_k <- sig2e_0
# create covariance Cholesky factor
Lambda_k <- mapping(theta_k, n, q, init=TRUE)
# update covariance Cholesky factor
Lambda_k@x[] <- mapping(theta_k, n, q, init=FALSE)
LLt <- t(Lambda_k) %*% t(Z) %*% Z %*% Lambda_k + diag(n*q)
L <- t(chol(LLt))
# Solve normal equations
R_ZX <- solve( L, t(Lambda_k) %*% t(Z) %*% X0 )
R_XtR_X <- (t(X0) %*% X0) - (t(R_ZX) %*% R_ZX)
AtA <- cbind(
rbind(L%*%t(L), t(R_ZX)%*%t(L)),
rbind(L%*%R_ZX, t(R_ZX) %*% R_ZX + R_XtR_X)
)
d_k <- solve(
AtA,
rbind( t(Lambda_k)%*%t(Z)%*%y0, t(X0)%*%y0 )
)
u_k <- d_k[1:(n*q)]
beta_k <- d_k[-(1:(n*q))]
# Update residual
if (REML){
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / (N-p)
} else {
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / N
}
# optimization step
theta_k <- optim(theta_k, fn=devtheta, gr=NULL,
y0, X0, Z, sig2e_k, u_k, beta_k, n, N, p, q, R_XtR_X=R_XtR_X,
REML=REML, method="L-BFGS-B", lower=c(0, -Inf, 0))$par
k <- k + 1
print(beta_k)
print(theta_k)
# optimization step
theta_k <- optim(theta_k, fn=devtheta, gr=gr_devtheta,
y0, X0, Z, sig2e_k, u_k, beta_k, n, N, p, q, R_XtR_X=R_XtR_X,
REML=REML, method="L-BFGS-B", lower=c(0, -Inf, 0))$par
gr_devtheta <- function(theta, y, X, Z, sig2e, u, beta, n, N, p, q,
R_XtR_X=NULL, REML=FALSE){
Lambda <- mapping(theta, n, q, init=TRUE)
LLt <- t(Lambda) %*% t(Z) %*% Z %*% Lambda + diag(n*q)
L <- t(chol(LLt))
r2theta <- r2theta(y, X, Z, Lambda, u, beta, n, p, q)
gr <- rep(NA, length(theta))
for (i in 1:length(gr)){
ind_vect <- rep(0, length(gr))
ind_vect[i] <- 1
D <- mapping(ind_vect, n, q, init=FALSE)
gr[i] <- sum(diag(
solve(LLt) %*% (t(Lambda)%*%t(Z)%*%Z%*%D + t(D)%*%t(Z)%*%Z%*%Lambda_k)
)) - 2*t(u) %*%t(D)%*%t(Z)%*%(y - Z%*%Lambda%*%u - X%*%beta)/sig2e
}
}
# optimization step
theta_k <- optim(theta_k, fn=devtheta, gr=gr_devtheta,
y0, X0, Z, sig2e_k, u_k, beta_k, n, N, p, q, R_XtR_X=R_XtR_X,
REML=REML, method="L-BFGS-B", lower=c(0, -Inf, 0))$par
Lambda <- Lambda_k
gr <- rep(NA, length(theta))
i <- 1
ind_vect <- rep(0, length(gr))
gr <- rep(NA, length(theta_k))
ind_vect <- rep(0, length(gr))
ind_vect[i] <- 1
D <- mapping(ind_vect, n, q, init=FALSE)
gr[i] <- sum(diag(
solve(LLt) %*% (t(Lambda)%*%t(Z)%*%Z%*%D + t(D)%*%t(Z)%*%Z%*%Lambda_k)
)) - 2*t(u) %*%t(D)%*%t(Z)%*%(y - Z%*%Lambda%*%u - X%*%beta)/sig2e
solve(LLt)
solve(LLt) %*% (t(Lambda)%*%t(Z)%*%Z%*%D + t(D)%*%t(Z)%*%Z%*%Lambda_k)
dim(solve(LLt))
dim(Lambda)
dim(Z)
dim(D)
D <- mapping(ind_vect, n, q, init=FALSE)
D <- mapping(ind_vect, n, q, init=TRUE)
dim(D)
sum(diag(
solve(LLt) %*% (t(Lambda)%*%t(Z)%*%Z%*%D + t(D)%*%t(Z)%*%Z%*%Lambda_k)
)) - 2*t(u) %*%t(D)%*%t(Z)%*%(y - Z%*%Lambda%*%u - X%*%beta)/sig2e
sum(diag(
solve(LLt) %*% (t(Lambda)%*%t(Z)%*%Z%*%D + t(D)%*%t(Z)%*%Z%*%Lambda_k)
))
rm(Lambda)
gr_devtheta <- function(theta, y, X, Z, sig2e, u, beta, n, N, p, q,
R_XtR_X=NULL, REML=FALSE){
Lambda <- mapping(theta, n, q, init=TRUE)
LLt <- t(Lambda) %*% t(Z) %*% Z %*% Lambda + diag(n*q)
L <- t(chol(LLt))
r2theta <- r2theta(y, X, Z, Lambda, u, beta, n, p, q)
gr <- rep(NA, length(theta))
for (i in 1:length(gr)){
ind_vect <- rep(0, length(gr))
ind_vect[i] <- 1
D <- mapping(ind_vect, n, q, init=TRUE)
gr[i] <- sum(diag(
solve(LLt) %*% (t(Lambda)%*%t(Z)%*%Z%*%D + t(D)%*%t(Z)%*%Z%*%Lambda_k)
)) - 2*t(u) %*%t(D)%*%t(Z)%*%(y - Z%*%Lambda%*%u - X%*%beta)/sig2e
}
}
# optimization step
theta_k <- optim(theta_k, fn=devtheta, gr=gr_devtheta,
y0, X0, Z, sig2e_k, u_k, beta_k, n, N, p, q, R_XtR_X=R_XtR_X,
REML=REML, method="L-BFGS-B", lower=c(0, -Inf, 0))$par
gr_devtheta <- function(theta, y, X, Z, sig2e, u, beta, n, N, p, q,
R_XtR_X=NULL, REML=FALSE){
Lambda <- mapping(theta, n, q, init=TRUE)
LLt <- t(Lambda) %*% t(Z) %*% Z %*% Lambda + diag(n*q)
L <- t(chol(LLt))
r2theta <- r2theta(y, X, Z, Lambda, u, beta, n, p, q)
gr <- rep(NA, length(theta))
for (i in 1:length(gr)){
ind_vect <- rep(0, length(gr))
ind_vect[i] <- 1
D <- mapping(ind_vect, n, q, init=TRUE)
gr[i] <- sum(diag(
solve(LLt) %*% (t(Lambda)%*%t(Z)%*%Z%*%D + t(D)%*%t(Z)%*%Z%*%Lambda_k)
)) - 2*t(u) %*%t(D)%*%t(Z)%*%(y - Z%*%Lambda%*%u - X%*%beta)/sig2e
}
return ( gr )
}
# optimization step
theta_k <- optim(theta_k, fn=devtheta, gr=gr_devtheta,
y0, X0, Z, sig2e_k, u_k, beta_k, n, N, p, q, R_XtR_X=R_XtR_X,
REML=REML, method="L-BFGS-B", lower=c(0, -Inf, 0))$par
theta_k
theta_0
beta_k <- beta_0
theta_k <- theta_0
sig2e_k <- sig2e_0
# create covariance Cholesky factor
Lambda_k <- mapping(theta_k, n, q, init=TRUE)
u_k <- rep(0, n*q)
d_k <- c(u_k, beta_k)
d_old <- d_k + 2*eta
k <- 0
while ( (max(abs(d_k-d_old)) > eta) & (k < maxits) ) {
d_old <- d_k
# update covariance Cholesky factor
Lambda_k@x[] <- mapping(theta_k, n, q, init=FALSE)
LLt <- t(Lambda_k) %*% t(Z) %*% Z %*% Lambda_k + diag(n*q)
L <- t(chol(LLt))
# Solve normal equations
R_ZX <- solve( L, t(Lambda_k) %*% t(Z) %*% X0 )
R_XtR_X <- (t(X0) %*% X0) - (t(R_ZX) %*% R_ZX)
AtA <- cbind(
rbind(L%*%t(L), t(R_ZX)%*%t(L)),
rbind(L%*%R_ZX, t(R_ZX) %*% R_ZX + R_XtR_X)
)
d_k <- solve(
AtA,
rbind( t(Lambda_k)%*%t(Z)%*%y0, t(X0)%*%y0 )
)
u_k <- d_k[1:(n*q)]
beta_k <- d_k[-(1:(n*q))]
# Update residual
if (REML){
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / (N-p)
} else {
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / N
}
# optimization step
theta_k <- optim(theta_k, fn=devtheta, gr=gr_devtheta,
y0, X0, Z, sig2e_k, u_k, beta_k, n, N, p, q, R_XtR_X=R_XtR_X,
REML=REML, method="L-BFGS-B", lower=c(0, -Inf, 0))$par
k <- k + 1
print(beta_k)
print(theta_k)
}
eta <- 0.01
beta_k <- beta_0
theta_k <- theta_0
sig2e_k <- sig2e_0
# create covariance Cholesky factor
Lambda_k <- mapping(theta_k, n, q, init=TRUE)
u_k <- rep(0, n*q)
d_k <- c(u_k, beta_k)
d_old <- d_k + 2*eta
k <- 0
while ( (max(abs(d_k-d_old)) > eta) & (k < maxits) ) {
d_old <- d_k
# update covariance Cholesky factor
Lambda_k@x[] <- mapping(theta_k, n, q, init=FALSE)
LLt <- t(Lambda_k) %*% t(Z) %*% Z %*% Lambda_k + diag(n*q)
L <- t(chol(LLt))
# Solve normal equations
R_ZX <- solve( L, t(Lambda_k) %*% t(Z) %*% X0 )
R_XtR_X <- (t(X0) %*% X0) - (t(R_ZX) %*% R_ZX)
AtA <- cbind(
rbind(L%*%t(L), t(R_ZX)%*%t(L)),
rbind(L%*%R_ZX, t(R_ZX) %*% R_ZX + R_XtR_X)
)
d_k <- solve(
AtA,
rbind( t(Lambda_k)%*%t(Z)%*%y0, t(X0)%*%y0 )
)
u_k <- d_k[1:(n*q)]
beta_k <- d_k[-(1:(n*q))]
# Update residual
if (REML){
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / (N-p)
} else {
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / N
}
# optimization step
theta_k <- optim(theta_k, fn=devtheta, gr=gr_devtheta,
y0, X0, Z, sig2e_k, u_k, beta_k, n, N, p, q, R_XtR_X=R_XtR_X,
REML=REML, method="L-BFGS-B", lower=c(0, -Inf, 0))$par
k <- k + 1
print(beta_k)
print(theta_k)
}
beta_k <- rep(0, p)
theta_k <- rep(1, d)
sig2e_k <- 1
# create covariance Cholesky factor
Lambda_k <- mapping(theta_k, n, q, init=TRUE)
u_k <- rep(0, n*q)
d_k <- c(u_k, beta_k)
d_old <- d_k + 2*eta
k <- 0
while ( (max(abs(d_k-d_old)) > eta) & (k < maxits) ) {
d_old <- d_k
# update covariance Cholesky factor
Lambda_k@x[] <- mapping(theta_k, n, q, init=FALSE)
LLt <- t(Lambda_k) %*% t(Z) %*% Z %*% Lambda_k + diag(n*q)
L <- t(chol(LLt))
# Solve normal equations
R_ZX <- solve( L, t(Lambda_k) %*% t(Z) %*% X0 )
R_XtR_X <- (t(X0) %*% X0) - (t(R_ZX) %*% R_ZX)
AtA <- cbind(
rbind(L%*%t(L), t(R_ZX)%*%t(L)),
rbind(L%*%R_ZX, t(R_ZX) %*% R_ZX + R_XtR_X)
)
d_k <- solve(
AtA,
rbind( t(Lambda_k)%*%t(Z)%*%y0, t(X0)%*%y0 )
)
u_k <- d_k[1:(n*q)]
beta_k <- d_k[-(1:(n*q))]
# Update residual
if (REML){
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / (N-p)
} else {
sig2e_k <- r2theta(y0, X0, Z, Lambda_k, u_k, beta_k, n, p, q) / N
}
# optimization step
theta_k <- optim(theta_k, fn=devtheta, gr=gr_devtheta,
y0, X0, Z, sig2e_k, u_k, beta_k, n, N, p, q, R_XtR_X=R_XtR_X,
REML=REML, method="L-BFGS-B", lower=c(0, -Inf, 0))$par
k <- k + 1
print(beta_k)
print(theta_k)
}
rm(list=ls())
library(glasso)
library(rcl)
library(MASS)
source("~/.active-rstudio-document", echo=TRUE)
gammaNL_hat
gammaRC_hat
gamma
k
muRC_hat
muNL_hat
betaRC_hat[S]
betaNL_hat[S]
rm(list=ls())
?rnorm
160/180
source("~/.active-rstudio-document", echo=TRUE)
50^2/(50^2+10^2)
50^2/(50^2+50^2)
50^2/(50^2+30^2)
50^2/(50^2+35^2)
dat <- data.frame(x=x, w=w, y=y)
w <- x + rnorm(n, mean=0, sd=35)
dat <- data.frame(x=x, w=w, y=y)
ggplot(data=dat, aes(x=x, y=y)) +
geom_point()
ggplot(data=dat, aes(x=x, y=y)) +
geom_point() +
theme_minimal()
ggplot(data=dat, aes(x=x, y=y)) +
geom_point() +
scale_shape(solid=FALSE) +
theme_minimal()
ggplot(data=dat, aes(x=x, y=y)) +
geom_point(shape=1) +
theme_minimal()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
dat <- data.frame(p=c(x,w), y=c(y,y))
rep(1:2,each=n)
dat <- data.frame(p=c(x,w), y=c(y,y), id=rep(1:2, each=n))
dat <- data.frame(p=c(x,w), y=c(y,y), id=rep(1:2, each=n))
ggplot(data=dat, aes(x=p, w=w, y=y), col=id) +
geom_point(shape=1)
ggplot(data=dat, aes(x=p, y=y), col=id) +
geom_point(shape=1)
ggplot(data=dat, aes(x=p, y=y), group=id) +
geom_point(shape=1)
ggplot(data=dat, aes(x=p, y=y, col=id)) +
geom_point(shape=1)
ggplot(data=dat, aes(x=p, y=y, group=id)) +
geom_point(shape=1)
ggplot(data=dat, aes(x=p, y=y, col=id)) +
geom_point(shape=1)
View(dat)
ggplot(data=dat, aes(x=p, y=y, col=id)) +
geom_point(shape=1) +
geom_smooth(method='lm', formula= y~x, col=id, se=F, linewidth=0.5) +
labs(x="weight (lbs)", y="height (cm)") +
theme_minimal()
ggplot(data=dat, aes(x=p, y=y, col=id)) +
geom_point(shape=1) +
geom_smooth(method='lm', aes(formula= y~x, col=id, se=F, linewidth=0.5)) +
labs(x="weight (lbs)", y="height (cm)") +
theme_minimal()
ggplot(data=dat, aes(x=p, y=y, col=id)) +
geom_point(shape=1) +
geom_smooth(method='lm', aes(x=p, y=y, col=id), se=F, linewidth=0.5) +
labs(x="weight (lbs)", y="height (cm)") +
theme_minimal()
ggplot(data=dat, aes(x=p, y=y, col=id)) +
geom_point(shape=1) +
geom_smooth(method='lm', aes(x=p, y=y, colour=id), se=F, linewidth=0.5) +
labs(x="weight (lbs)", y="height (cm)") +
theme_minimal()
ggplot(data=dat, aes(x=p, y=y, col=id)) +
geom_point(shape=1) +
geom_smooth(method='lm', aes(x=p, y=y, group=id), se=F, linewidth=0.5) +
labs(x="weight (lbs)", y="height (cm)") +
theme_minimal()
rm(list=ls9)
rm(list=ls())
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
rm(list=ls())
source("~/Desktop/Ganesh/Jobs/GSK/Job Talk/me_weight_height_example.R", echo=TRUE)
rm(list=ls())
?scale
if(!is.null(NULL)) print(5)
if(is.null(NULL)) print(5)
?nor
?norm
library(rclmmlasso)
?ic.lmm_lasso
setwd("Desktop/Ganesh/Research/rclmmlasso")
setwd("..")
library(rclmmlasso)
?rclmmlasso::ic.rclmmlasso()
setwd("rclmmlasso")
library(devtools)
documnet()
document()
